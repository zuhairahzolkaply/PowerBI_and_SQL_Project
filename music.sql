--give us a list of all Customer, have FirstName LastName and email adress
-- SELECT FirstName, LastName, Email
-- FROM Customer

-- change column name
-- SELECT 
-- 	FirstName AS [Customer First Name],
-- 	LastName AS 'Customer Last Name',
-- 	Email AS EMAIL
-- FROM Customer

--results sorted by LastName
-- SELECT 
-- 	FirstName AS [Customer First Name],
-- 	LastName AS 'Customer Last Name',
-- 	Email AS EMAIL
-- FROM Customer
-- ORDER BY LastName DESC

--results sorted with multiple column by LastName DESC, FirstName ASC
-- SELECT 
-- 	FirstName AS [Customer First Name],
-- 	LastName AS 'Customer Last Name',
-- 	Email AS EMAIL
-- FROM Customer
-- ORDER BY
-- 	FirstName ASC, /*dont' forget comma */
-- 	LastName DESC

--subset with 10 first VALUES
-- SELECT 
-- 	FirstName AS [Customer First Name],
-- 	LastName AS 'Customer Last Name',
-- 	Email AS EMAIL
-- FROM Customer
-- ORDER BY
-- 	FirstName ASC, /*dont' forget comma */
-- 	LastName DESC
-- LIMIT 10

--How many customers purchased two songs at .99 each? so total 1.98
--select all from invoice, sort total column, count all record that are 1.98
-- SELECT 
-- 	InvoiceDate,
-- 	BillingAddress,
-- 	BillingCity,
-- 	Total
-- FROM Invoice
-- WHERE Total = 1.98
-- ORDER BY InvoiceDate

--how many invoice exist between 1.98 and 5
-- SELECT 
-- 	InvoiceDate,
-- 	BillingAddress,
-- 	BillingCity,
-- 	Total
-- FROM Invoice
-- WHERE 
-- 	Total BETWEEN 1.98 AND 5.00
-- ORDER BY InvoiceDate

--how many invoice EXACTLY  1.98 OR 3.96
-- SELECT 
-- 	InvoiceDate,
-- 	BillingAddress,
-- 	BillingCity,
-- 	Total
-- FROM Invoice
-- WHERE 
-- 	Total = 1.98 OR total = 3.96
-- --//total IN (1.98,3.96)
-- ORDER BY InvoiceDate

--how many invoices are billed to city of brussels
-- SELECT 
-- 	InvoiceDate,
-- 	BillingAddress,
-- 	BillingCity
-- FROM Invoice
-- WHERE 
-- 	BillingCity = 'Brussels'

--how many invoices are billed to city of brussels, orlando or paris
-- SELECT 
-- 	InvoiceDate,
-- 	BillingAddress,
-- 	BillingCity
-- FROM Invoice
-- WHERE 
-- 	BillingCity IN ('Brussels','Orlando','Paris')

--partial values using LIKE, value that we not quite sure of  or incorrectly spelled
--how many invoices start with B
-- SELECT 
-- 	InvoiceDate,
-- 	BillingAddress,
-- 	BillingCity
-- FROM Invoice
-- WHERE 
-- 	BillingCity LIKE 'B%' /* % dont care what comes after */

--how many invoices that has B anywhere in the name
-- SELECT 
-- 	InvoiceDate,
-- 	BillingAddress,
-- 	BillingCity
-- FROM Invoice
-- WHERE 
-- 	BillingCity LIKE '%b%' /*case insensitive*/

--DATE DATABASE

--how many invoices were billed on may 22,2010
--dates stored by year, followed by months then day and time included
-- datatype is datetime
-- SELECT 
-- 	InvoiceDate,
-- 	BillingAddress,
-- 	BillingCity
-- FROM Invoice
-- WHERE 
-- 	InvoiceDate = '2010-05-22 00:00:00'

--date function called date
-- SELECT 
-- 	InvoiceDate,
-- 	BillingAddress,
-- 	BillingCity
-- FROM Invoice
-- WHERE 
-- 	DATE (InvoiceDate) = '2010-05-22'

-- get billed after may 22,2010 and total of less than 3
-- SELECT 
-- 	InvoiceDate,
-- 	BillingAddress,
-- 	BillingCity,
-- 	total
-- FROM Invoice
-- WHERE 
-- 	DATE (InvoiceDate) > '2010-05-22' AND total < 3

-- get all invoices whose billing city starts with P or the billing city starts with D
-- SELECT 
-- 	InvoiceDate,
-- 	BillingAddress,
-- 	BillingCity,
-- 	total
-- FROM Invoice
-- WHERE 
-- 	BillingCity LIKE 'P%' OR BillingCity LIKE 'D%'

--get a list of all invoices that are greater than $1.98 from any cities whose names start with P or D. 
-- SELECT 
-- 	InvoiceDate,
-- 	BillingAddress,
-- 	BillingCity,
-- 	total
-- FROM Invoice
-- WHERE 
-- 	total > 1.98 AND ( BillingCity LIKE 'P%' OR BillingCity LIKE 'D%' )/*PEMDAS*/

--want customer to spend between 7 and 15
--baseline purchase = between 0.99 and 1.99
--low purchase = between 2 and 6.99
--target purchase = between 7 and 15
--top performer = above 15
--to see any information that  can decipher or glean from the database concerning the sales in all of the listed categories.
--CASE statement to create a new temporary field in our database that serves as a label for the data based on user-specified conditions.
-- SELECT 
-- 	InvoiceDate,
-- 	BillingAddress,
-- 	BillingCity,
-- 	total,
-- 	CASE
-- 	WHEN total < 2.00 THEN 'Baseline Purchase'
-- 	WHEN total BETWEEN 2.00 and 6.99 THEN 'Low Purchase'
-- 	WHEN total BETWEEN 7.00 and 15.00 THEN 'Target Purchase'
-- 	ELSE 'Top Performer'
-- 	END AS PurchaseType
-- FROM Invoice
-- WHERE 
-- 	PurchaseType = 'Top Performer'
-- ORDER BY
-- 	BillingCity

--full list of customer names, first and last names, next to all the invoices generated by that customer. INVOICE + CUSTOMER TABLE
-- SELECT *
-- FROM	
-- 	Invoice
-- INNER JOIN
-- 	Customer
-- ON 
-- 	Invoice.CustomerId = Customer.CustomerId
-- ORDER BY
-- 	Customer.CustomerId

-- SELECT *
-- FROM	
-- 	Invoice AS i
-- INNER JOIN
-- 	Customer AS c
-- ON 
-- 	i.CustomerId = c.CustomerId
-- ORDER BY
-- 	c.CustomerId

-- SELECT 
-- 	c.LastName,
-- 	c.FirstName,
-- 	i.CustomerId,
-- 	i.InvoiceId,
-- 	i.InvoiceDate,
-- 	i.total
-- FROM	
-- 	Invoice AS i
-- INNER JOIN
-- 	Customer AS c
-- ON 
-- 	i.CustomerId = c.CustomerId
-- ORDER BY
-- 	c.CustomerId

--to reward the employees that are responsible for the 10 highest individual sales. 
--Customer service wants to create a plaque for each employee with a list of the customers that they've helped.
-- SELECT
-- 	e.FirstName,
-- 	e.LastName,
-- 	e.EmployeeId,
-- 	c.FirstName,
-- 	c.LastName,
-- 	c.SupportRepId,
-- 	i.CustomerId,
-- 	i.total
-- FROM
-- 	Invoice AS i
-- INNER JOIN	
-- 	Customer AS c
-- ON
-- 	i.CustomerId = c.CustomerId
-- INNER JOIN
-- 	Employee AS e
-- ON
-- 	c.SupportRepId = e.EmployeeId
-- ORDER BY
-- 	i.total DESC
-- LIMIT 10

--FUNCTIONS
-- sending out personalized postcards to each one of  US-based customers. 
--double pipe operator || for include many table in one table
-- SELECT
-- 	FirstName,
-- 	LastName,
-- 	Address,
-- 	FirstName ||''|| LastName||''||Address||','||City||''||State||''||PostalCode AS [Mailing Address]
-- FROM Customer
-- WHERE 
-- 	Country = 'USA'

--remove dash and some numbers by SUBSTR() 
--have a new postal code and nicely formatted to only the first five digits 
-- SELECT
-- 	FirstName,
-- 	LastName,
-- 	Address,
-- 	FirstName ||''|| LastName||''||Address||','||City||''||State||''||PostalCode AS [Mailing Address],
-- 	LENGTH(PostalCode),
-- 	substr(PostalCode,1,5) AS [5 Digit PostalCode] 
-- 	/*specify the first digit  to start the removal,keep five digits by putting a comma in five (alias this as five digit postal code.)*/
-- FROM Customer
-- WHERE 
-- 	Country = 'USA'

--UPPER Functions
--convert string text to uppercase
-- SELECT
-- 	FirstName,
-- 	LastName,
-- 	Address,
-- 	FirstName ||''|| LastName||''||Address||','||City||''||State||''||PostalCode AS [Mailing Address],
-- 	LENGTH(PostalCode),
-- 	substr(PostalCode,1,5) AS [5 Digit PostalCode], 
-- 	/*specify the first digit  to start the removal,keep five digits by putting a comma in five (alias this as five digit postal code.)*/
-- 	UPPER(firstname) AS [First Name ALL caps]
-- FROM Customer
-- WHERE 
-- 	Country = 'USA'

--LOWER Function
-- SELECT
-- 	FirstName,
-- 	LastName,
-- 	Address,
-- 	FirstName ||''|| LastName||''||Address||','||City||''||State||''||PostalCode AS [Mailing Address],
-- 	LENGTH(PostalCode),
-- 	substr(PostalCode,1,5) AS [5 Digit PostalCode], 
-- 	/*specify the first digit  to start the removal,keep five digits by putting a comma in five (alias this as five digit postal code.)*/
-- 	UPPER(firstname) AS [First Name ALL caps],
-- 	LOWER(lastname) AS [Last Name ALL lower]
-- FROM Customer
-- WHERE 
-- 	Country = 'USA'

--calculate age of all employees
-- SELECT
-- 	FirstName,
-- 	LastName,
-- 	BirthDate,
-- 	strftime('%Y-%M-%d',Birthdate) AS [BirthDate No Timecode],
-- 	strftime('%Y-%M-%d','now') - strftime('%Y-%M-%d',Birthdate) AS Age
-- FROM 
-- 	Employee

--total global sales
-- SELECT
-- 	sum(TOTAL)as [Total Sales]
-- FROM
-- 	Invoice
-- 	
--Nesting
-- SELECT
-- 	sum(TOTAL)as [Total Sales],
-- 	round(avg(total),2) AS [Average Sales],
-- 	MAX(Total) AS [Maximum Sales],
-- 	COUNT(*) AS [Sales Count]
-- 	/*count every single row in table*/
-- FROM
-- 	Invoice

--what are average invoice totals by City
-- SELECT
-- 	BillingCity, /*non aggregate*/
-- 	ROUND(avg(total),2)
-- FROM
-- 	Invoice
-- GROUP BY /*non aggregate*/
-- 	BillingCity
-- ORDER bY
-- 	BillingCity
	
--what are average invoice totals by City for only city that starts with L
-- SELECT
-- 	BillingCity, /*non aggregate*/
-- 	ROUND(avg(total),2)
-- FROM
-- 	Invoice
-- WHERE
-- 	BillingCity LIKE 'L%'
-- GROUP BY /*non aggregate*/
-- 	BillingCity
-- ORDER bY
-- 	BillingCity
-- 	

--average invoice total more than 5
-- SELECT
-- 	BillingCity, /*non aggregate*/
-- 	ROUND(avg(total),2)
-- FROM
-- 	Invoice
-- GROUP BY /*non aggregate*/
-- 	BillingCity
-- HAVING 
-- 	avg(total) > 5
-- ORDER bY
-- 	BillingCity
-- 	
--average invoice total more than 5 cities starting with b
-- SELECT
-- 	BillingCity, 
-- 	ROUND(avg(total),2)
-- FROM
-- 	Invoice
-- WHERE
-- 	BillingCity LIKE 'B%'
-- GROUP BY /*non aggregate*/
-- 	BillingCity
-- HAVING 
-- 	avg(total) > 5
-- ORDER bY
-- 	BillingCity

-- group by more than one aggregate field at a time
--average invoice totals by billing country and city?
-- SELECT
-- 	BillingCity, 
-- 	BillingCountry,
-- 	ROUND(avg(total),2)
-- FROM
-- 	Invoice
-- 
-- GROUP BY /*non aggregate*/
-- 	BillingCity, BillingCountry
-- 
-- ORDER bY
-- 	BillingCountry

--Gather data about all invoices that are less than this avg
-- SELECT
-- 	InvoiceDate,
-- 	BillingAddress,
-- 	BillingCity,
-- 	total
-- FROM
-- 	Invoice
-- WHERE	
-- 	total <
-- 	(select avg(total) from Invoice)
-- ORDER bY
-- 	total DESC

--How is each individual city performing against the global average sales
-- SELECT 
-- 	BillingCity, 
-- 	avg(total) AS [City Average],
-- 	(SELECT avg(total) from Invoice) AS [global average]
-- FROM	
-- 	Invoice
-- GROUP BY /*non aggregate*/
-- 	BillingCity
-- ORDER bY
-- 	BillingCity

--subquaries without aggregate function
-- SELECT 
-- 	InvoiceDate,
-- 	BillingAddress,
-- 	BillingCity
-- FROM
-- 	Invoice
-- WHERE
-- 	InvoiceDate >
-- (SELECT
-- 	InvoiceDate
-- FROM
-- 	Invoice
-- WHERE
-- 	InvoiceId = 251)

--suquaries returning multiples VALUES
-- SELECT
-- 	InvoiceDate,
-- 	BillingAddress,
-- 	BillingCity
-- FROM Invoice
-- WHERE
-- 	InvoiceDate IN
-- (SELECT
-- 	InvoiceDate
-- FROM
-- 	Invoice
-- WHERE
-- 	InvoiceId in (251,252,254))

--which tracks are not selling
--DISTINCT
-- SELECT
-- 	TrackId,
-- 	Composer,
-- 	Name
-- FROM Track
-- WHERE TrackId
-- NOT IN
-- (SELECT DISTINCT TrackId
-- FROM InvoiceLine
-- ORDER BY TrackId)

-- How many Customer LastNames start with G?
-- SELECT 
--     FirstName AS [Customer First Name],
--     LastName AS 'Customer Last Name',
--     Email AS EMAIL
-- FROM 
--     Customer
-- WHERE
--     LastName LIKE 'G%'
-- ORDER BY 
--     LastName DESC;

--which track appears at the top of the Track table when sorted in descending order?
-- SELECT *
-- FROM 
--     Track
-- ORDER BY 
--     Name DESC;

--how many tracks in the WSDA music database do not have a composer listed?
-- SELECT *
-- FROM 
--     Track
-- WHERE 
-- 	Composer = 'unavailable'
-- ORDER BY 
--     Name DESC;